{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Users/ak/Desktop/CV/avo/frontend/src/webcam.js\",\n    _s = $RefreshSig$();\n\nimport { useCallback, useRef, useState } from 'react';\nimport Webcam from 'react-webcam';\nexport const WebcamCapture = props => {\n  _s();\n\n  const webcamRef = useRef(null);\n  const [imgSrc, setImgSrc] = useState(null); // const capture = useCallback(() => {\n  //     const imageSrc = webcamRef.current.getScreenshot();\n  //     console.log(imageSrc)\n  //     // setImgSrc(imageSrc);\n  //     props.client.send(imageSrc)\n  //     // convertURIToImageData(imageSrc).then(function(imageData) {\n  //     //     // Here you can use imageData\n  //     //     console.log(imageData);\n  //     //     props.client.send(JSON.stringify({\"image\":imageData}, null, 2));\n  //     // });\n  // }, [webcamRef, setImgSrc]);\n\n  const capture = () => {\n    while (true) {\n      const imageSrc = webcamRef.current.getScreenshot();\n      console.log(imageSrc);\n      props.client.send(imageSrc);\n    }\n  };\n\n  const convertURIToImageData = URI => {\n    return new Promise(function (resolve, reject) {\n      if (URI == null) return reject();\n      var canvas = document.createElement('canvas'),\n          context = canvas.getContext('2d'),\n          image = new Image();\n      image.addEventListener('load', function () {\n        canvas.width = image.width;\n        canvas.height = image.height;\n        context.drawImage(image, 0, 0, canvas.width, canvas.height);\n        resolve(context.getImageData(0, 0, canvas.width, canvas.height));\n      }, false);\n      image.src = URI;\n    });\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(Webcam, {\n      audio: false,\n      ref: webcamRef,\n      screenshotFormat: \"image/jpeg\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: capture,\n      children: \"Capture photo\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true);\n};\n\n_s(WebcamCapture, \"u/Qq/Hs6jqqnNfQWkA2PBfR2ypQ=\");\n\n_c = WebcamCapture;\n\nvar _c;\n\n$RefreshReg$(_c, \"WebcamCapture\");","map":{"version":3,"sources":["/Users/ak/Desktop/CV/avo/frontend/src/webcam.js"],"names":["useCallback","useRef","useState","Webcam","WebcamCapture","props","webcamRef","imgSrc","setImgSrc","capture","imageSrc","current","getScreenshot","console","log","client","send","convertURIToImageData","URI","Promise","resolve","reject","canvas","document","createElement","context","getContext","image","Image","addEventListener","width","height","drawImage","getImageData","src"],"mappings":";;;;;;AAAA,SAAQA,WAAR,EAAqBC,MAArB,EAA6BC,QAA7B,QAA4C,OAA5C;AACA,OAAOC,MAAP,MAAmB,cAAnB;AAEA,OAAO,MAAMC,aAAa,GAAIC,KAAD,IAAW;AAAA;;AACpC,QAAMC,SAAS,GAAGL,MAAM,CAAC,IAAD,CAAxB;AACA,QAAM,CAACM,MAAD,EAASC,SAAT,IAAsBN,QAAQ,CAAC,IAAD,CAApC,CAFoC,CAIpC;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;AAEA,QAAMO,OAAO,GAAG,MAAM;AAClB,WAAM,IAAN,EAAW;AACP,YAAMC,QAAQ,GAAGJ,SAAS,CAACK,OAAV,CAAkBC,aAAlB,EAAjB;AACAC,MAAAA,OAAO,CAACC,GAAR,CAAYJ,QAAZ;AACAL,MAAAA,KAAK,CAACU,MAAN,CAAaC,IAAb,CAAkBN,QAAlB;AACH;AAEJ,GAPD;;AASA,QAAMO,qBAAqB,GAAIC,GAAD,IAAS;AACnC,WAAO,IAAIC,OAAJ,CAAY,UAASC,OAAT,EAAkBC,MAAlB,EAA0B;AAC3C,UAAIH,GAAG,IAAI,IAAX,EAAiB,OAAOG,MAAM,EAAb;AACjB,UAAIC,MAAM,GAAGC,QAAQ,CAACC,aAAT,CAAuB,QAAvB,CAAb;AAAA,UACIC,OAAO,GAAGH,MAAM,CAACI,UAAP,CAAkB,IAAlB,CADd;AAAA,UAEIC,KAAK,GAAG,IAAIC,KAAJ,EAFZ;AAGAD,MAAAA,KAAK,CAACE,gBAAN,CAAuB,MAAvB,EAA+B,YAAW;AACxCP,QAAAA,MAAM,CAACQ,KAAP,GAAeH,KAAK,CAACG,KAArB;AACAR,QAAAA,MAAM,CAACS,MAAP,GAAgBJ,KAAK,CAACI,MAAtB;AACAN,QAAAA,OAAO,CAACO,SAAR,CAAkBL,KAAlB,EAAyB,CAAzB,EAA4B,CAA5B,EAA+BL,MAAM,CAACQ,KAAtC,EAA6CR,MAAM,CAACS,MAApD;AACAX,QAAAA,OAAO,CAACK,OAAO,CAACQ,YAAR,CAAqB,CAArB,EAAwB,CAAxB,EAA2BX,MAAM,CAACQ,KAAlC,EAAyCR,MAAM,CAACS,MAAhD,CAAD,CAAP;AACD,OALD,EAKG,KALH;AAMAJ,MAAAA,KAAK,CAACO,GAAN,GAAYhB,GAAZ;AACD,KAZM,CAAP;AAaH,GAdD;;AAgBA,sBACE;AAAA,4BACE,QAAC,MAAD;AACE,MAAA,KAAK,EAAE,KADT;AAEE,MAAA,GAAG,EAAEZ,SAFP;AAGE,MAAA,gBAAgB,EAAC;AAHnB;AAAA;AAAA;AAAA;AAAA,YADF,eAME;AAAQ,MAAA,OAAO,EAAEG,OAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YANF;AAAA,kBADF;AAUD,CArDI;;GAAML,a;;KAAAA,a","sourcesContent":["import {useCallback, useRef, useState} from 'react'\nimport Webcam from 'react-webcam'\n\nexport const WebcamCapture = (props) => {\n    const webcamRef = useRef(null);\n    const [imgSrc, setImgSrc] = useState(null);\n  \n    // const capture = useCallback(() => {\n    //     const imageSrc = webcamRef.current.getScreenshot();\n        \n    //     console.log(imageSrc)\n    //     // setImgSrc(imageSrc);\n    //     props.client.send(imageSrc)\n    //     // convertURIToImageData(imageSrc).then(function(imageData) {\n    //     //     // Here you can use imageData\n    //     //     console.log(imageData);\n    //     //     props.client.send(JSON.stringify({\"image\":imageData}, null, 2));\n    //     // });\n        \n    // }, [webcamRef, setImgSrc]);\n\n    const capture = () => {\n        while(true){\n            const imageSrc = webcamRef.current.getScreenshot();\n            console.log(imageSrc)\n            props.client.send(imageSrc)\n        }\n        \n    }\n  \n    const convertURIToImageData = (URI) => {\n        return new Promise(function(resolve, reject) {\n          if (URI == null) return reject();\n          var canvas = document.createElement('canvas'),\n              context = canvas.getContext('2d'),\n              image = new Image();\n          image.addEventListener('load', function() {\n            canvas.width = image.width;\n            canvas.height = image.height;\n            context.drawImage(image, 0, 0, canvas.width, canvas.height);\n            resolve(context.getImageData(0, 0, canvas.width, canvas.height));\n          }, false);\n          image.src = URI;\n        });\n    }\n\n    return (\n      <>\n        <Webcam\n          audio={false}\n          ref={webcamRef}\n          screenshotFormat=\"image/jpeg\"\n        />\n        <button onClick={capture}>Capture photo</button>\n      </>\n    );\n  };\n  \n  \n  "]},"metadata":{},"sourceType":"module"}